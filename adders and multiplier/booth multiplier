module booth_multiplier #(parameter N = 8)(input signed [(N-1):0] multiplicand, multiplier, output reg signed [(2*N-1):0] product);
    reg signed [(2*N-1):0] A, S, P;
    integer i;

    always @(*) begin
        A = {multiplicand, {(N){1'b0}}};               // A = M << N
        S = {-multiplicand, {(N){1'b0}}};              // S = -M << N
        P = {{(N-1){1'b0}}, multiplier, 1'b0};        // P = {0, Q, Q-1}
        
        for (i=0;i<N;i=i+1) begin
            case (P[1:0])
                2'b01: P=P+A;
                2'b10: P=P+S;
                default: ;
            endcase
            P = P >>> 1;
        end
        product = P[(2*N-1):0];
    end
endmodule
